<% multi? = match?(%ColumnMulti{}, @paragraph)
grouped? = ColumnMulti.grouped?(@paragraph)

has_fares? = multi? && ColumnMulti.includes?(@paragraph, :fares)
has_links? = multi? && ColumnMulti.includes?(@paragraph, :links)
has_cards? = has_fares? || has_links?

classes = [
  # Paragraph type derived from struct
  "c-paragraph--#{@paragraph_type}",

  # Global paragraph properties
  Paragraph.right_rail?(@paragraph) && "c-paragraph--right-rail",
  Paragraph.full_bleed?(@paragraph) && "u-full-bleed",

  # Specific to Multi Columns (column_multi)
  multi? && grouped? && "c-paragraph--grouped",
  multi? && !grouped? && "c-paragraph--ungrouped",
  has_cards? && "c-paragraph--with-cards",
  has_fares? && "c-paragraph--with-fares",
  has_links? && "c-paragraph--with-links",

  # Unique classes specific to this type of paragraph
  @paragraph_classes
]

type_and_classes =
  classes
  |> Enum.filter(& &1)
  |> List.flatten()
  |> Enum.intersperse(" ") %>
<div class={"c-paragraph #{ type_and_classes }"}>
  {render_paragraph_content(@paragraph, @conn)}
</div>
